{
  "name": "GridEditingApi",
  "description": "The editing API interface that is available in the grid `apiRef`.",
  "properties": [
    {
      "name": "commitCellChange",
      "description": "Updates the field corresponding to the given id with the value stored in the edit row model.",
      "type": "(params: GridCommitCellChangeParams, event?: MuiBaseEvent) => boolean | Promise<boolean>"
    },
    {
      "name": "commitRowChange",
      "description": "Updates the row corresponding to the given id with the values stored in the edit row model.",
      "type": "(id: GridRowId, event?: MuiBaseEvent) => boolean | Promise<boolean>"
    },
    {
      "name": "getCellMode",
      "description": "Gets the mode of a cell.",
      "type": "(id: GridRowId, field: string) => GridCellMode"
    },
    {
      "name": "getEditRowsModel",
      "description": "Gets the edit rows model of the grid.",
      "type": "() => GridEditRowsModel"
    },
    {
      "name": "getRowMode",
      "description": "Gets the mode of a row.",
      "type": "(id: GridRowId) => GridRowMode"
    },
    {
      "name": "isCellEditable",
      "description": "Controls if a cell is editable.",
      "type": "(params: GridCellParams) => boolean"
    },
    {
      "name": "setCellMode",
      "description": "Sets the mode of a cell.",
      "type": "(id: GridRowId, field: string, mode: GridCellMode) => void"
    },
    {
      "name": "setEditCellValue",
      "description": "Sets the value of the edit cell.\nCommonly used inside the edit cell component.",
      "type": "(params: GridEditCellValueParams, event?: MuiBaseEvent) => Promise<boolean> | void"
    },
    {
      "name": "setEditRowsModel",
      "description": "Set the edit rows model of the grid.",
      "type": "(model: GridEditRowsModel) => void"
    },
    {
      "name": "setRowMode",
      "description": "Sets the mode of a row.",
      "type": "(id: GridRowId, mode: GridRowMode) => void"
    },
    {
      "name": "startCellEditMode",
      "description": "Puts the cell corresponding to the given row id and field into edit mode.",
      "type": "(params: GridStartCellEditModeParams) => void"
    },
    {
      "name": "startRowEditMode",
      "description": "Puts the row corresponding to the given id into edit mode.",
      "type": "(params: GridStartRowEditModeParams) => void"
    },
    {
      "name": "stopCellEditMode",
      "description": "Puts the cell corresponding to the given row id and field into view mode and updates the original row with the new value stored.\nIf <code>params.ignoreModifications</code> is <code>false</code> it will discard the modifications made.",
      "type": "(params: GridStopCellEditModeParams) => void"
    },
    {
      "name": "stopRowEditMode",
      "description": "Puts the row corresponding to the given id and into view mode and updates the original row with the new values stored.\nIf <code>params.ignoreModifications</code> is <code>false</code> it will discard the modifications made.",
      "type": "(params: GridStopRowEditModeParams) => void"
    }
  ]
}
